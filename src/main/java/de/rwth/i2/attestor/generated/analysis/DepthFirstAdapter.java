/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.rwth.i2.attestor.generated.analysis;

import java.util.*;
import de.rwth.i2.attestor.generated.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPLtlform().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStateformLtlform(AStateformLtlform node)
    {
        defaultIn(node);
    }

    public void outAStateformLtlform(AStateformLtlform node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStateformLtlform(AStateformLtlform node)
    {
        inAStateformLtlform(node);
        if(node.getStateform() != null)
        {
            node.getStateform().apply(this);
        }
        outAStateformLtlform(node);
    }

    public void inANextLtlform(ANextLtlform node)
    {
        defaultIn(node);
    }

    public void outANextLtlform(ANextLtlform node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextLtlform(ANextLtlform node)
    {
        inANextLtlform(node);
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        if(node.getLtlform() != null)
        {
            node.getLtlform().apply(this);
        }
        outANextLtlform(node);
    }

    public void inATermLtlform(ATermLtlform node)
    {
        defaultIn(node);
    }

    public void outATermLtlform(ATermLtlform node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermLtlform(ATermLtlform node)
    {
        inATermLtlform(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermLtlform(node);
    }

    public void inAUntilLtlform(AUntilLtlform node)
    {
        defaultIn(node);
    }

    public void outAUntilLtlform(AUntilLtlform node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUntilLtlform(AUntilLtlform node)
    {
        inAUntilLtlform(node);
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getLeftform() != null)
        {
            node.getLeftform().apply(this);
        }
        if(node.getUntil() != null)
        {
            node.getUntil().apply(this);
        }
        if(node.getRightform() != null)
        {
            node.getRightform().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAUntilLtlform(node);
    }

    public void inAReleaseLtlform(AReleaseLtlform node)
    {
        defaultIn(node);
    }

    public void outAReleaseLtlform(AReleaseLtlform node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReleaseLtlform(AReleaseLtlform node)
    {
        inAReleaseLtlform(node);
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getLeftform() != null)
        {
            node.getLeftform().apply(this);
        }
        if(node.getRelease() != null)
        {
            node.getRelease().apply(this);
        }
        if(node.getRightform() != null)
        {
            node.getRightform().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAReleaseLtlform(node);
    }

    public void inANegStateform(ANegStateform node)
    {
        defaultIn(node);
    }

    public void outANegStateform(ANegStateform node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegStateform(ANegStateform node)
    {
        inANegStateform(node);
        if(node.getNeg() != null)
        {
            node.getNeg().apply(this);
        }
        if(node.getAtomicprop() != null)
        {
            node.getAtomicprop().apply(this);
        }
        outANegStateform(node);
    }

    public void inAAndStateform(AAndStateform node)
    {
        defaultIn(node);
    }

    public void outAAndStateform(AAndStateform node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndStateform(AAndStateform node)
    {
        inAAndStateform(node);
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getLeftform() != null)
        {
            node.getLeftform().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getRightform() != null)
        {
            node.getRightform().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAAndStateform(node);
    }

    public void inAOrStateform(AOrStateform node)
    {
        defaultIn(node);
    }

    public void outAOrStateform(AOrStateform node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrStateform(AOrStateform node)
    {
        inAOrStateform(node);
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getLeftform() != null)
        {
            node.getLeftform().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getRightform() != null)
        {
            node.getRightform().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAOrStateform(node);
    }

    public void inATrueTerm(ATrueTerm node)
    {
        defaultIn(node);
    }

    public void outATrueTerm(ATrueTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueTerm(ATrueTerm node)
    {
        inATrueTerm(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueTerm(node);
    }

    public void inAFalseTerm(AFalseTerm node)
    {
        defaultIn(node);
    }

    public void outAFalseTerm(AFalseTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseTerm(AFalseTerm node)
    {
        inAFalseTerm(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseTerm(node);
    }

    public void inAAtomicpropTerm(AAtomicpropTerm node)
    {
        defaultIn(node);
    }

    public void outAAtomicpropTerm(AAtomicpropTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtomicpropTerm(AAtomicpropTerm node)
    {
        inAAtomicpropTerm(node);
        if(node.getAtomicprop() != null)
        {
            node.getAtomicprop().apply(this);
        }
        outAAtomicpropTerm(node);
    }
}
