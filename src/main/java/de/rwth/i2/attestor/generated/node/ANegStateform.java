/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.rwth.i2.attestor.generated.node;

import de.rwth.i2.attestor.generated.analysis.*;

@SuppressWarnings("nls")
public final class ANegStateform extends PStateform
{
    private TNeg _neg_;
    private TAtomicprop _atomicprop_;

    public ANegStateform()
    {
        // Constructor
    }

    public ANegStateform(
        @SuppressWarnings("hiding") TNeg _neg_,
        @SuppressWarnings("hiding") TAtomicprop _atomicprop_)
    {
        // Constructor
        setNeg(_neg_);

        setAtomicprop(_atomicprop_);

    }

    @Override
    public Object clone()
    {
        return new ANegStateform(
            cloneNode(this._neg_),
            cloneNode(this._atomicprop_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANegStateform(this);
    }

    public TNeg getNeg()
    {
        return this._neg_;
    }

    public void setNeg(TNeg node)
    {
        if(this._neg_ != null)
        {
            this._neg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._neg_ = node;
    }

    public TAtomicprop getAtomicprop()
    {
        return this._atomicprop_;
    }

    public void setAtomicprop(TAtomicprop node)
    {
        if(this._atomicprop_ != null)
        {
            this._atomicprop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atomicprop_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._neg_)
            + toString(this._atomicprop_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._neg_ == child)
        {
            this._neg_ = null;
            return;
        }

        if(this._atomicprop_ == child)
        {
            this._atomicprop_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._neg_ == oldChild)
        {
            setNeg((TNeg) newChild);
            return;
        }

        if(this._atomicprop_ == oldChild)
        {
            setAtomicprop((TAtomicprop) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
